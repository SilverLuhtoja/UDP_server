let map_1:Vec<Vec<i32>> = vec![
    vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ];

let map_2:Vec<Vec<i32>> = vec![
    vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ];
let mut map = Map::new_from_arr(map_1);
let decoy:Player = Player::new(map.get_spawn().await, String::from("Miki")) ;
let decoy_addr: SocketAddr = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(192, 168, 8, 102)), 0);
players.insert(decoy_addr,decoy);

if addr != &decoy_addr{
    server.send_message(&message, addr).await
}


// pub async  fn read_message(&self) -> (Data, SocketAddr) {
//     let mut buf = [0; BUFFER];
//     let (amt, _src) = self.socket.recv_from(&mut buf).await.expect("ERROR<read>: failed to receive message failed");
//     let incoming_message = String::from_utf8_lossy(&buf[..amt]).into_owned();
//     let data: Data = serde_json::from_str(&incoming_message).expect("ERROR<read>: couldn't parse message");
//     println!("Received message from <{}>: {:?}", _src, data.message_type);
//     return (data, _src)
// }
